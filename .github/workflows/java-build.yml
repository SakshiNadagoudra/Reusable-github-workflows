name: Build and Deploy Java Application

on:
  push:
    branches:
      - feature-branch  # Replace with your target branch
    workflow_dispatch:

jobs:
  
  run-on-merge:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Merge pull request')  # Check if the commit is a PR merge
    steps:
      - name: Run on PR merge
        run: echo "This workflow runs only when a pull request is merged."


  build:
    runs-on: ubuntu-latest

    steps:
  - name: Checkout Repository
    uses: actions/checkout@v3

  - name: Setup GitHub CLI
    run: |
      echo "Setting up GitHub CLI"
      sudo apt-get update
      sudo apt-get install -y gh

  - name: Deploy and Test Sequentially with Approval
    env:
      GH_TOKEN: ${{ github.token }}  # Set the GH_TOKEN environment variable
    run: |
      # Define environments
      ENVIRONMENTS=("dev" "sit" "prod")
      
      # Loop through each environment
      for env in "${ENVIRONMENTS[@]}"; do
        # Step 1: Trigger Deploy workflow for the current environment
        echo "====================================="
        echo "Triggering Deploy workflow for $env"
        echo "====================================="
        gh workflow run reusable-deploy.yml --ref main -F environment=$env
        echo "Waiting for deploy workflow ($env) to complete..."

        # Step 2: Wait for approval for Deploy workflow (if environment is not 'dev')
        if [ "$env" != "dev" ]; then
          echo "====================================="
          echo "Waiting for manual approval for $env"
          echo "====================================="
          # The deployment should be manually approved in GitHub based on environment protection rules
          gh run watch ${{ github.run_id }} --status completed

          # Check approval status
          approval_status=$(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/approvals | jq -r '.[0].status')
          if [ "$approval_status" == "rejected" ]; then
            echo "Approval for $env was rejected. Stopping workflow."
            exit 1
          fi
          echo "Approval granted for $env."
        fi

        # Step 3: Trigger Test workflow for the current environment after approval
        echo "====================================="
        echo "Triggering Test workflow for $env"
        echo "====================================="
        gh workflow run reusable-test.yml --ref main -F environment=$env
        echo "Waiting for test workflow ($env) to complete..."
        sleep 30  # Adjust this to the time your test workflow needs to complete

        # Step 4: Optional Notification to Manager (for environments other than prod)
        if [ "$env" != "prod" ]; then
          echo "Sending approval notification to manager for $env environment..."
          # Notification logic goes here (Slack, email, etc.)
        fi
      done


  # # Stage 1: Build
  # build:
  #   name: Build Java Code
  #   runs-on: ubuntu-latest
  #   needs: run-on-merge
  #   steps: 
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up JDK
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'adopt'
  #         java-version: '11'

  #     - name: Build with Maven
  #       run: mvn clean install

  #     - name: Upload Build Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-artifacts
  #         path: target/*.jar

  # # Stage 3: Deploy to Development
  # deploy-dev:
  #   name: Deploy to Dev Environment
  #   needs: build
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main # Reference the reusable workflow
  #   with:
  #     environment: dev  # Pass the environment name to the reusable workflow

  # test-sit:
  #   name: Test in SIT
  #   needs: deploy-dev
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-test.yml@main
  #   with:
  #     environment: sit

  # # Stage 3: Deploy to Development
  # deploy-sit:
  #   name: Deploy to Sit Environment
  #   needs: test-sit
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main  # Reference the reusable workflow
  #   with:
  #     environment: sit
  
  # test-uat:
  #   name: Test in Uat
  #   needs: deploy-sit
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-test.yml@main
  #   with:
  #     environment: uat

  # # Stage 3: Deploy to Development
  # deploy-uat:
  #   name: Deploy to Uat Environment
  #   needs: test-uat
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main  # Reference the reusable workflow
  #   with:
  #     environment: uat
  
  # test-prod:
  #   name: Test in Prod
  #   needs: deploy-uat
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-test.yml@main
  #   with:
  #     environment: prod

  # # Stage 4: Deploy to Production
  # deploy-Prod:
  #   name: Deploy to Production Environment
  #   needs: test-prod
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main  # Reference the reusable workflow
  #   with:
  #     environment: prod