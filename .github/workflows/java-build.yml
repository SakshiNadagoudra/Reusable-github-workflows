name: Build and Deploy Java Application

on:
  push:
    branches:
      - feature-branch  # Replace with your target branch
    workflow_dispatch:

jobs:
  
  run-on-merge:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Merge pull request')  # Check if the commit is a PR merge
    steps:
      - name: Run on PR merge
        run: echo "This workflow runs only when a pull request is merged."


  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI"
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Deploy and Test Sequentially with Approval
        env:
          GH_TOKEN: ${{ github.token }}  # Set the GH_TOKEN environment variable
        run: |
          # Define environments
          ENVIRONMENTS=("dev" "sit" "prod")
          # Loop through each environment
          for env in "${ENVIRONMENTS[@]}"; do
            # Step 1: Trigger Deploy workflow for the current environment
            echo "====================================="
            echo "Triggering Deploy workflow for $env"
            echo "====================================="
            gh workflow run reusable-deploy.yml --ref main -F environment=$env

            # Step 2: Wait for deploy workflow to start
            echo "Waiting for deploy workflow ($env) to start..."
            sleep 30  # Adjust this to a suitable delay for your workflow

            # Step 3: Monitor deploy workflow status
            echo "Waiting for manual approval for $env..."
            while true; do
              STATUS=$(gh run list --workflow reusable-deploy.yml --json status --jq '.[0].status')
              CONCLUSION=$(gh run list --workflow reusable-deploy.yml --json conclusion --jq '.[0].conclusion')
              if [ "$STATUS" == "completed" ]; then
                if [ "$CONCLUSION" == "success" ]; then
                  echo "Deploy workflow for $env completed successfully."
                  break
                else
                  echo "Deploy workflow for $env failed."
                  exit 1
                fi
              elif [ "$STATUS" == "waiting" ]; then
                sleep 30
              else
                echo "Deploy workflow for $env is in progress..."
                sleep 30
              fi
            done

            # Step 4: Trigger Test workflow for the current environment after approval
            echo "====================================="
            echo "Triggering Test workflow for $env"
            echo "====================================="
            gh workflow run reusable-test.yml --ref main -F environment=$env
            echo "Waiting for test workflow ($env) to complete..."
            sleep 30  # Adjust this to the time your test workflow needs to complete

            # Step 5: Send approval notification with test results
            TEST_RUN_ID=$(gh run list --workflow reusable-test.yml --json databaseId --jq '.[0].databaseId')
            TEST_RESULTS=$(gh run view $TEST_RUN_ID --log)
            APPROVAL_LINK="https://github.com/YOUR_REPOSITORY/actions/runs/$TEST_RUN_ID"
            gh api repos/YOUR_USERNAME/YOUR_REPOSITORY/dispatches -f event_type=approval_notification -f client_payload="{\"text\": \"Test results for $env environment: \n$TEST_RESULTS \n\nPlease approve the deployment to the next environment by clicking [here]($APPROVAL_LINK).\"}"

            # Step 6: Send notification for manager approval (optional)
            if [ "$env" != "prod" ]; then
              echo "Sending approval notification to manager for $env environment..."
              # Notification logic goes here (Slack, email, etc.)
            fi
          done


        




  