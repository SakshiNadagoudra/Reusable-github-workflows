name: Build and Deploy Java Application

on:
  push:
    branches:
      - feature-branch  # Replace with your target branch
    workflow_dispatch:

jobs:

  run-on-merge:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Merge pull request')  # Check if the commit is a PR merge
    steps:
      - name: Run on PR merge
        run: echo "This workflow runs only when a pull request is merged."
  
  build:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: |
          echo "Building the project"
          mvn clean install 
          mkdir -p build 
          echo "Build output" > build/output.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts 
          path: build/

  deploy-and-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI"
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Deploy and Test Sequentially with Approval
        env:
          GH_TOKEN: ${{ github.token }}  # Set the GH_TOKEN environment variable
        run: |
          # Define environments
          ENVIRONMENTS=("dev" "sit" "uat" "prod")
          # Loop through each environment
          for env in "${ENVIRONMENTS[@]}"; do
            # Step 1: Trigger Deploy workflow for the current environment
            echo "====================================="
            echo "Triggering Deploy workflow for $env"
            echo "====================================="
            gh workflow run reusable-deploy.yml --ref main -F environment=$env

            # Step 2: Wait for deploy workflow to start
            echo "Waiting for deploy workflow ($env) to start..."
            sleep 30  # Adjust this to a suitable delay for your workflow

            # Step 3: Monitor deploy workflow status
            echo "Waiting for manual approval for $env..."
            while true; do
              STATUS=$(gh run list --workflow reusable-deploy.yml --json status --jq '.[0].status')
              CONCLUSION=$(gh run list --workflow reusable-deploy.yml --json conclusion --jq '.[0].conclusion')
              if [ "$STATUS" == "completed" ]; then
                if [ "$CONCLUSION" == "success" ]; then
                  echo "Deploy workflow for $env completed successfully."
                  break
                else
                  echo "Deploy workflow for $env failed."
                  exit 1
                fi
              elif [ "$STATUS" == "waiting" ]; then
                sleep 30
              else
                echo "Deploy workflow for $env is in progress..."
                sleep 30
              fi
            done

            # Step 4: Trigger Test workflow for the current environment after approval
            echo "====================================="
            echo "Triggering Test workflow for $env"
            echo "====================================="
            gh workflow run reusable-test.yml --ref main -F environment=$env
            echo "Waiting for test workflow ($env) to complete..."
            sleep 30  # Adjust this to the time your test workflow needs to complete

            # Optional: Add any additional steps or logic needed here for your workflow
          done
