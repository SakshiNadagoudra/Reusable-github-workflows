name: Build and Deploy Java Application

on:
  push:
    branches:
      - feature-branch  # Replace with your target branch
    workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI"
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Trigger deployments
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
            environments=("dev" "sit" "uat" "prod")
            
            for env in "${environments[@]}"; do
              echo "Starting deployment to $env environment"
              
              # Trigger deploy workflow
              deploy_run_id=$(gh workflow run deploy.yml -f environment=$env --ref ${{ github.ref }} --json databaseId --jq '.databaseId')
              echo "Deploy workflow triggered for $env (ID: $deploy_run_id)"
              
              # Wait for completion without verbose output
              while true; do
                status=$(gh run view $deploy_run_id --json conclusion --jq '.conclusion')
                if [ "$status" = "success" ]; then
                  echo "✓ Deploy to $env completed successfully"
                  break
                elif [ "$status" = "failure" ] || [ "$status" = "cancelled" ]; then
                  echo "✗ Deploy to $env failed"
                  exit 1
                fi
                sleep 10
              done
              
              # Trigger test workflow
              echo "Starting tests for $env environment"
              test_run_id=$(gh workflow run test.yml -f environment=$env --ref ${{ github.ref }} --json databaseId --jq '.databaseId')
              echo "Test workflow triggered for $env (ID: $test_run_id)"
              
              # Wait for completion without verbose output
              while true; do
                status=$(gh run view $test_run_id --json conclusion --jq '.conclusion')
                if [ "$status" = "success" ]; then
                  echo "✓ Tests for $env completed successfully"
                  break
                elif [ "$status" = "failure" ] || [ "$status" = "cancelled" ]; then
                  echo "✗ Tests for $env failed"
                  exit 1
                fi
                sleep 10
              done
              
              echo "----------------------------------------"
            done