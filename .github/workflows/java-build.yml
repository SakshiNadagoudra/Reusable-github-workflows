name: Build and Deploy Java Application
on:
  push:
    branches:
      - feature-branch  # Replace with your target branch
    workflow_dispatch:

jobs:
  
  run-on-merge:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Merge pull request')  # Check if the commit is a PR merge
    steps:
      - name: Run on PR merge
        run: echo "This workflow runs only when a pull request is merged."


  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI"
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Deploy and Test Sequentially with Approval
        env:
          GH_TOKEN: ${{ github.token }}  # Set the GH_TOKEN environment variable
        run: |
          # Define environments
          ENVIRONMENTS=("dev" "sit" "prod")
          APPROVAL_FLAG="false"  # To track approval status

          # Function to send notification for approval
          send_approval_notification() {
            echo "Sending approval notification to manager for $1 environment..."
            # Send the notification to the manager. You can use Slack, Email, or GitHub comments.
            # Example for Slack (adjust based on your setup):
            # curl -X POST -H 'Content-type: application/json' --data '{"text":"Please approve deployment for '$1'"}' https://hooks.slack.com/services/TOKEN
          }

          # Loop through each environment
          for env in "${ENVIRONMENTS[@]}"; do
            # Step 1: Deploy to the current environment
            echo "====================================="
            echo "Triggering Deploy workflow for $env"
            echo "====================================="
            gh workflow run reusable-deploy.yml --ref main -F environment=$env
            echo "Waiting for deploy workflow ($env) to complete..."
            sleep 30  # Adjust this to the time your deploy workflow needs to complete

            # Step 2: Test the current environment
            echo "====================================="
            echo "Triggering Test workflow for $env"
            echo "====================================="
            gh workflow run reusable-test.yml --ref main -F environment=$env
            echo "Waiting for test workflow ($env) to complete..."
            sleep 30  # Adjust this to the time your test workflow needs to complete

            # Step 3: If successful, notify the manager for approval
            if [ "$env" != "prod" ]; then
              send_approval_notification $env
              echo "Waiting for manager approval before proceeding to the next environment..."
              # Here we assume you are using GitHub's environment protection rule to handle approval for the next environment.
              # After the approval process, continue the workflow. GitHub automatically handles this pausing based on protection rules.
            fi
          done


  # # Stage 1: Build
  # build:
  #   name: Build Java Code
  #   runs-on: ubuntu-latest
  #   needs: run-on-merge
  #   steps: 
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up JDK
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'adopt'
  #         java-version: '11'

  #     - name: Build with Maven
  #       run: mvn clean install

  #     - name: Upload Build Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-artifacts
  #         path: target/*.jar

  # # Stage 3: Deploy to Development
  # deploy-dev:
  #   name: Deploy to Dev Environment
  #   needs: build
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main # Reference the reusable workflow
  #   with:
  #     environment: dev  # Pass the environment name to the reusable workflow

  # test-sit:
  #   name: Test in SIT
  #   needs: deploy-dev
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-test.yml@main
  #   with:
  #     environment: sit

  # # Stage 3: Deploy to Development
  # deploy-sit:
  #   name: Deploy to Sit Environment
  #   needs: test-sit
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main  # Reference the reusable workflow
  #   with:
  #     environment: sit
  
  # test-uat:
  #   name: Test in Uat
  #   needs: deploy-sit
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-test.yml@main
  #   with:
  #     environment: uat

  # # Stage 3: Deploy to Development
  # deploy-uat:
  #   name: Deploy to Uat Environment
  #   needs: test-uat
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main  # Reference the reusable workflow
  #   with:
  #     environment: uat
  
  # test-prod:
  #   name: Test in Prod
  #   needs: deploy-uat
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-test.yml@main
  #   with:
  #     environment: prod

  # # Stage 4: Deploy to Production
  # deploy-Prod:
  #   name: Deploy to Production Environment
  #   needs: test-prod
  #   uses: SakshiNadagoudra/Reusable-github-workflows/.github/workflows/reusable-deploy.yml@main  # Reference the reusable workflow
  #   with:
  #     environment: prod