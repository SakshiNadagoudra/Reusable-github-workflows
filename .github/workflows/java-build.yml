name: Build, Deploy, and Test Workflow

on:
  push:
    branches:
      - feature-branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: '11'

      - name: Build with Maven
        run: mvn clean install

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "build-${{ github.run_id }}"
          release_name: "Build Artifacts ${{ github.run_id }}"
          draft: true
          prerelease: true

      - name: Upload Build Artifacts to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.jar
          asset_name: build-artifacts.jar
          asset_content_type: application/java-archive

  deploy-and-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI"
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Define Environments
        id: define_envs
        run: echo "ENVIRONMENTS=dev sit prod" >> $GITHUB_ENV

      - name: Deploy and Test Sequentially with Approval
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_TAG: "build-${{ needs.build.outputs.run_id }}"
        run: |
          for env in $ENVIRONMENTS; do
            echo "====================================="
            echo "Deploying to $env"
            echo "====================================="

            # Download artifact from GitHub Release
            echo "Downloading artifact from release: $RELEASE_TAG"
            gh release download "$RELEASE_TAG" --pattern "build-artifacts.jar" --dir artifacts
            if [ ! -f artifacts/build-artifacts.jar ]; then
              echo "Failed to download artifact for $env. Exiting."
              exit 1
            fi

            # Deploy to environment
            echo "Deploying to $env environment..."
            # Add deployment logic here
            ls artifacts/build-artifacts.jar

            # Approval process for protected environments
            if [ "$env" != "dev" ]; then
              echo "Waiting for approval to proceed with $env..."
              # Simulate waiting for approval
              sleep 10
            fi

            # Trigger tests
            echo "Running tests in $env environment..."
            # Add testing logic here
          done
