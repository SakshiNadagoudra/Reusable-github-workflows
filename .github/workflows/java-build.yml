name: Build Java Application

on:
  push:
    branches:
      - feature-branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      - name: Build with Maven
        run: mvn clean install

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/*.jar

      - name: Output Run ID
        run: echo "run_id=${{ github.run_id }}" >> $GITHUB_ENV



  deploy-and-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI"
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Deploy and Test Sequentially with Approval
        env:
          GH_TOKEN: ${{ github.token }}  # Set the GH_TOKEN environment variable
        run: |
            # Define environments
            ENVIRONMENTS=("dev" "sit" "prod")
            # Loop through each environment
            for env in "${ENVIRONMENTS[@]}"; do
              # Step 1: Trigger Deploy workflow for the current environment
              echo "====================================="
              echo "Triggering Deploy workflow for $env"
              echo "====================================="
              gh workflow run reusable-deploy.yml --ref main -F environment=$env
              echo "Waiting for deploy workflow ($env) to complete..."
              # Step 2: Wait for approval if environment is not 'dev'
              if [ "$env" != "dev" ]; then
                echo "====================================="
                echo "Waiting for manual approval for $env"
                echo "====================================="
                # This is where GitHub will pause the workflow for manual approval.
                # Ensure your environment protection rules are correctly configured to require approval
                # for 'sit' and 'prod' environments.
                # This line assumes your workflow will pause until approval is granted
                gh run watch ${{ github.run_id }} --status completed
                approval_status=$(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/approvals | jq -r '.[0].status')
                if [ "$approval_status" == "rejected" ]; then
                  echo "Approval for $env was rejected. Stopping workflow."
                  exit 1
                fi
                echo "Approval granted for $env."
              fi
              # Step 3: Trigger Test workflow for the current environment after approval
              echo "====================================="
              echo "Triggering Test workflow for $env"
              echo "====================================="
              gh workflow run reusable-test.yml --ref main -F environment=$env
              echo "Waiting for test workflow ($env) to complete..."
              sleep 30  # Adjust this to the time your test workflow needs to complete
              # Step 4: Send notification for manager approval (optional)
              if [ "$env" != "prod" ]; then
                echo "Sending approval notification to manager for $env environment..."
                # Notification logic goes here (Slack, email, etc.)
              fi
            done
  
