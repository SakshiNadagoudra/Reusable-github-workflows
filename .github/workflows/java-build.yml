name: Build Java Application

on:
  push:
    branches:
      - feature-branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: '11'

      - name: Build with Maven
        run: mvn clean install

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/*.jar

      - name: Output Run ID
        run: echo "run_id=${{ github.run_id }}" >> $GITHUB_ENV



  deploy-and-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI"
          sudo apt-get update
          sudo apt-get install -y gh

          - name: Deploy and Test Sequentially with Approval
          env:
            GH_TOKEN: ${{ github.token }}
          run: |
              ENVIRONMENTS=("dev" "sit" "prod")
              for env in "${ENVIRONMENTS[@]}"; do
                echo "====================================="
                echo "Triggering Deploy workflow for $env"
                echo "====================================="
  
                # Trigger Deploy workflow and extract the run_id
                deploy_output=$(gh workflow run reusable-deploy.yml --ref main -F environment=$env -F run_id=$GITHUB_RUN_ID)
                echo "Deploy workflow triggered. Output:"
                echo "$deploy_output"
  
                # Extract run_id from deploy_output
                run_id=$(echo "$deploy_output" | grep -oP '(?<=actions/runs/)\d+' || echo "")
                if [ -z "$run_id" ]; then
                  echo "Failed to extract run_id. Fetching latest run ID via API..."
                  run_id=$(gh api repos/${{ github.repository }}/actions/workflows/reusable-deploy.yml/runs -q '.workflow_runs[0].id')
                fi
  
                if [ -z "$run_id" ]; then
                  echo "Could not determine run_id for $env. Exiting."
                  exit 1
                fi
  
                echo "Triggered deploy workflow with run ID: $run_id"
  
                # Wait for Deploy workflow to complete
                echo "Waiting for deploy workflow ($env) to complete..."
                gh run watch "$run_id" --exit-status
  
                # Check approval status if environment is not 'dev'
                if [ "$env" != "dev" ]; then
                  echo "====================================="
                  echo "Checking approval status for $env"
                  echo "====================================="
  
                  approval_status=$(gh api repos/${{ github.repository }}/actions/runs/"$run_id"/approvals -q '.[0].status')
                  if [ "$approval_status" == "rejected" ]; then
                    echo "Approval for $env was rejected. Stopping workflow."
                    exit 1
                  fi
                  echo "Approval granted for $env."
                fi
  
                # Trigger Test workflow after approval
                echo "====================================="
                echo "Triggering Test workflow for $env"
                echo "====================================="
                test_output=$(gh workflow run reusable-test.yml --ref main -F environment=$env -F run_id=$run_id)
                test_run_id=$(echo "$test_output" | grep -oP '(?<=actions/runs/)\d+' || echo "")
                if [ -z "$test_run_id" ]; then
                  echo "Failed to extract test run_id. Exiting."
                  exit 1
                fi
                echo "Triggered test workflow with run ID: $test_run_id"
                gh run watch "$test_run_id" --exit-status
              done